#!/bin/sh

################################################################################
# Version 1.3.0-RELEASE (22-07-2023)
################################################################################

################################################################################
# Copyright 2023 Nozel/Sebas Veeke. Licenced under a Creative Commons
# Attribution-NonCommercial-ShareAlike 4.0 International License.
#
# See https://creativecommons.org/licenses/by-nc-sa/4.0/
#
# Contact:
# > e-mail      mail@nozel.org
# > GitHub      onnozel
################################################################################

################################################################################
# VARIABLES
################################################################################

# updatebot version
UPDATEBOT_VERSION='1.3.0'

# commands
FREEBSD_UPDATE="$(command -v freebsd-update)"
IOCAGE="$(command -v iocage)"
PKG="$(command -v pkg)"

# colors
NC='\033[0;0m'
BOLD='\033[1m'
#UNDER='\033[4m'
#WHITE='\033[1;37m'
#RED='\033[0;31m'
#GREEN='\033[0;32m'
YELLOW='\033[1;33m'
LRED='\033[1;31m'
#LGREEN='\033[1;32m'
#LMAGENTA='\033[1;35m'
#LCYAN='\033[1;36m'

# populate program variables with zeros
ARGUMENT_VERSION='0'
ARGUMENT_HELP='0'
ARGUMENT_FREEBSD='0'
ARGUMENT_IOCAGE='0'
ARGUMENT_IOCAGE_SNAPSHOT='0'
ARGUMENT_IOCAGE_SNAPREMOVE='0'

################################################################################
# ARGUMENTS
################################################################################

# enable arguments to updatebot
while test -n "$1"; do
    case "$1" in
        # options
        --version)
            ARGUMENT_VERSION='1'
            shift
            ;;

        --help|-help|help|--h|-h|h)
            ARGUMENT_HELP='1'
            shift
            ;;

        # features
        --freebsd|freebsd|fbsd|-f|f)
            ARGUMENT_FREEBSD='1'
            shift
            ;;
    
        --iocage|iocage|-i|i)
            ARGUMENT_IOCAGE='1'
            shift
            ;;

        --snapshot|snapshot)
            ARGUMENT_IOCAGE_SNAPSHOT='1'
            shift
            ;;

        --snapremove|snapremove)
            ARGUMENT_IOCAGE_SNAPREMOVE='1'
            shift
            ;;

        # other
        *)
            ARGUMENT_NONE='1'
            shift
            ;;
    esac
done

################################################################################
# ERROR FUNCTIONS
################################################################################

error() {
    printf "%b%s%b\n" "${LRED}" "$@" "${NC}"
    exit 1
}

################################################################################
# REQUIREMENT FUNCTIONS
################################################################################

requirement_root() {
    # show error when updatebot isn't run with root privileges
    if [ "$(id -u)" -ne '0' ]; then
        error 'updatebot: error: used argument must be run with root privileges.'
    fi
}

requirement_os() {
    # show error when freebsd-version cannot be found
    if [ ! "$(command -v freebsd-version)" ]; then
        error 'updatebot: error: operating system is not supported.'
    fi
}

requirement_iocage() {
    # show error when iocage cannot be found
    if [ ! "$(command -v iocage)" ]; then
        error 'updatebot: error: iocage is required but not installed.'
    fi
}

################################################################################
# GENERAL FUNCTIONS
################################################################################

option_version() {
    printf "%bUpdatebot %s %b\n" "${BOLD}" "${UPDATEBOT_VERSION}" "${NC}"
    printf "%bCopyright (C) 2023 Nozel.%b\n" "${BOLD}" "${NC}"
    printf "%bLicense CC Attribution-NonCommercial-ShareAlike 4.0 Int.%b\n\n" "${BOLD}" "${NC}"
    printf "%bWritten by Sebas Veeke%b\n" "${BOLD}" "${NC}"

    # exit when done
    exit 0
}

option_help() {
    printf "${BOLD}Usage:${NC}\n"
    printf "%b  updatebot [feature/option]...%b\n\n" "${BOLD}" "${NC}"
    printf "${BOLD}Features:${NC}\n"
    printf "  -f, --freebsd        Update FreeBSD and its packages\n"
    printf "  -i, --iocage         Update all iocage jails\n"
    printf "      --snapshot       Create snapshots for all iocage jails\n"
    printf "      --snapremove     Remove snapshots for all iocage jails\n\n"
    printf "${BOLD}Options:${NC}\n"
    printf "  --help               Display this help and exit\n"
    printf "  --version            Display version information and exit\n"

    # exit when done
    exit 0
}

################################################################################
# FEATURE FUNCTIONS
################################################################################

feature_freebsd() {
    printf "%bupdatebot will update this FreeBSD system.%b\n" "${BOLD}" "${NC}"
    printf "\n%b(1/3) updating base operating system to latest patch level:%b\n" "${BOLD}" "${NC}"
    ${FREEBSD_UPDATE} fetch install
    printf "\n%b(2/3) updating local package repository to latest version:%b\n" "${BOLD}" "${NC}"
    ${PKG} update
    printf "\n%b(3/3) upgrading packages to latest versions:%b\n" "${BOLD}" "${NC}"
    ${PKG} upgrade --yes
    printf "\n%bAll done! \\\( ^ ᴗ ^ )/%b\n\n" "${BOLD}" "${NC}"
    printf "%bDo not forget to restart the server if the kernel was updated!%b\n" "${YELLOW}" "${NC}"
    printf "%bDo not forget to restart services that were updated!%b\n" "${YELLOW}" "${NC}"
}

feature_iocage() {
    printf "%bupdatebot will try to update the following jails:%b\n" "${YELLOW}" "${NC}"
    "${IOCAGE}" list --header | while read line; do
        STATUS="$(echo ${line} | awk '{print $3;}')"
        JAIL="$(echo ${line} | awk '{print $2;}')"
        if [ "${STATUS}" = 'up' ]; then
            printf "%s\n" "${JAIL}"
        fi
    done
    printf "\nWaiting 5 seconds before initiating updates. Press ctrl + c to cancel.\n\n"
    sleep 5

    "${IOCAGE}" list --header | while read line; do
        STATUS="$(echo ${line} | awk '{print $3;}')"
        JAIL="$(echo ${line} | awk '{print $2;}')"
        if [ "${STATUS}" = 'up' ]; then
            printf "\n%bUPDATING: %s%b\n" "${YELLOW}" "${JAIL}" "${NC}"
            printf "%b(1/4) Updating %s to latest patch level%b\n" "${YELLOW}" "${JAIL}" "${NC}"
            "${IOCAGE}" update "${JAIL}"
            printf "\n%b(2/4) Updating %s local package repositories to latest version%b\n" "${YELLOW}" "${JAIL}" "${NC}"
            "${IOCAGE}" exec "${JAIL}" "${PKG}" update
            printf "\n%b(3/4) Upgrading %s packages to latest versions%b\n" "${YELLOW}" "${JAIL}" "${NC}"
            "${IOCAGE}" exec "${JAIL}" "${PKG}" upgrade --yes
            printf "\n%b(4/4) Restarting %s%b\n" "${YELLOW}" "${JAIL}" "${NC}"
            "${IOCAGE}" stop "${JAIL}"
            sleep 1
            "${IOCAGE}" start "${JAIL}"
        elif [ "${STATUS}" = 'down' ]; then
            printf "%bSKIPPING (DOWN): %s%b\n" "${YELLOW}" "${JAIL}" "${NC}"
        else
            printf "%bSKIPPING (UNKNOWN): %s%b\n" "${YELLOW}" "${JAIL}" "${NC}"
        fi
    done

    printf "\n\n%bAll done! \\\( ^ ᴗ ^ )/%b\n" "${YELLOW}" "${NC}"
    printf "\n%bJail overview:%b\n\n" "${YELLOW}" "${NC}"
    "${IOCAGE}" list --long
}

feature_iocage_snapshot() {
    printf "%bupdatebot will create snapshots for the following jails:%b\n" "${BOLD}" "${NC}"
    printf "${YELLOW}"
    ${IOCAGE} list --quick --header | awk '{print $1;}'
    printf "${NC}"
    printf "\n%b(1/1) Creating snapshots:%b\n" "${BOLD}" "${NC}"
    "${IOCAGE}" list --quick --header | awk '{print $1;}' | while read line; do
        "${IOCAGE}" snapshot "${line}"
    done
    printf "\n\n%bAll done! \\\( ^ ᴗ ^ )/%b\n" "${BOLD}" "${NC}"
}

feature_iocage_snapremove() {
    printf "%bupdatebot will remove all automatically created upgrade snapshots for the following jails:%b\n" "${BOLD}" "${NC}"
    printf "${YELLOW}"
    ${IOCAGE} list --quick --header | awk '{print $1;}'
    printf "${NC}"
    printf "\n%b(1/1) Removing snapshots:%b\n" "${BOLD}" "${NC}"
    "${IOCAGE}" list --quick --header | awk '{print $1;}' | while read line; do
        JAIL_NAME="${line}"
        "${IOCAGE}" snaplist -H "${line}" | awk '{print $1;}' | grep "ioc_update" | grep -v "/root" | while read line; do
            "${IOCAGE}" snapremove --name "${line}" "${JAIL_NAME}"
        done
    done
    printf "\n\n%bAll done! \\\( ^ ᴗ ^ )/%b\n" "${BOLD}" "${NC}"
}

################################################################################
# MAIN FUNCTION
################################################################################

updatebot_main() {
    # check whether requirements are met
    requirement_root
    requirement_os

    # call option based on arguments
    if [ "${ARGUMENT_VERSION}" = '1' ]; then
        option_version
        exit 0
    elif [ "${ARGUMENT_HELP}" = '1' ]; then
        option_help
        exit 0
    # call feature based on arguments
    elif [ "${ARGUMENT_IOCAGE}" = '1' ] && [ "${ARGUMENT_IOCAGE_SNAPSHOT}" = '1' ]; then
        feature_iocage_snapshot
        exit 0
    elif [ "${ARGUMENT_IOCAGE}" = '1' ] && [ "${ARGUMENT_IOCAGE_SNAPREMOVE}" = '1' ]; then
        feature_iocage_snapremove
        exit 0    
    elif [ "${ARGUMENT_FREEBSD}" = '1' ]; then
        feature_freebsd
        exit 0
    elif [ "${ARGUMENT_IOCAGE}" = '1' ]; then
        requirement_iocage
        feature_iocage
        exit 0
    
    # return error on invalid argument
    elif [ "${ARGUMENT_NONE}" = '1' ]; then
        error "updatebot: error: used argument is invalid, use updatebot --help for proper usage.\n"
    fi
}

# call main function
updatebot_main
