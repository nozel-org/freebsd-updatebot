#!/bin/sh

################################################################################
# Version 1.5.0-RELEASE (10-04-2024)
################################################################################

#############################################################################
# SPDX-License-Identifier: Apache-2.0
#
# Copyright 2023 Sebas Veeke. All rights reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
# http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
#############################################################################

#############################################################################
# Contact:
# > E-mail      mail@nozel.org
# > Website     https://nozel.org
# > Codeberg    https://codeberg.org/nozel/updatebot
#############################################################################

################################################################################
# PROGRAM VARIABLES
################################################################################

# updatebot version
UPDATEBOT_VERSION='1.5.0'
UPDATEBOT_VERSION_DATE='10-04-2024'

# commands
FREEBSD_UPDATE="$(command -v freebsd-update)"
IOCAGE="$(command -v iocage)"
BASTILLE="$(command -v bastille)"
PKG="$(command -v pkg)"

# populate validation variables with zeros for validation
ARGUMENT_VERSION='0'
ARGUMENT_HELP='0'
ARGUMENT_FREEBSD='0'
ARGUMENT_BASTILLE='0'
ARGUMENT_IOCAGE='0'
ARGUMENT_SNAPSHOT='0'
ARGUMENT_SNAPREMOVE='0'

################################################################################
# ARGUMENTS
################################################################################

# enable arguments to updatebot
while test -n "$1"; do
    case "$1" in
        # options
        --version)
            ARGUMENT_VERSION='1'
            shift
            ;;

        --help|-help|help|--h|-h|h)
            ARGUMENT_HELP='1'
            shift
            ;;

        # features
        --freebsd|freebsd|fbsd|-f|f)
            ARGUMENT_FREEBSD='1'
            shift
            ;;
    
        --bastille|bastille|-b|b)
            ARGUMENT_BASTILLE='1'
            shift
            ;;

        --iocage|iocage|-i|i)
            ARGUMENT_IOCAGE='1'
            shift
            ;;

        --snapshot|snapshot)
            ARGUMENT_SNAPSHOT='1'
            shift
            ;;

        --snapremove|snapremove)
            ARGUMENT_SNAPREMOVE='1'
            shift
            ;;

        # other
        *)
            ARGUMENT_NONE='1'
            shift
            ;;
    esac
done

################################################################################
# ERROR FUNCTIONS
################################################################################

program_error() {
    printf "updatebot: error: %s %s %s\n" "${1}" "${2}" "${3}"
    exit 1
}

################################################################################
# REQUIREMENT FUNCTIONS
################################################################################

requirement_root() {
    # show error when updatebot isn't run with root privileges
    if [ "$(id -u)" -ne '0' ]; then
        program_error 'this feature must be run with root privileges'
    fi
}

requirement_os() {
    # show error when freebsd-version cannot be found
    if [ ! "$(command -v freebsd-version)" ]; then
        program_error 'operating system is not supported'
    fi
}

requirement_iocage() {
    # show error when iocage cannot be found
    if [ ! "$(command -v iocage)" ]; then
        program_error 'iocage is not installed'
    fi
}

requirement_bastille() {
    # show error when bastille cannot be found
    if [ ! "$(command -v bastille)" ]; then
        program_error 'bastille is not installed'
    fi
}

################################################################################
# GENERAL FUNCTIONS
################################################################################

option_version() {
    printf "Updatebot %s (%s)\n" "${UPDATEBOT_VERSION}" "${UPDATEBOT_VERSION_DATE}"
    printf "Copyright (C) 2023 S. Veeke. All rights reserved.\n"
    printf "SPDX-License-Identifier: Apache-2.0.\n"
    exit 0
}

option_help() {
    printf "Usage:\n"
    printf "  updatebot [feature]... [feature]...\n"
    printf "  updatebot [option]...\n\n"
    printf "Features:\n"
    printf "  -f, --freebsd        Update FreeBSD and its packages\n"
    printf "  -b, --bastille       Update all bastille jails\n"
    printf "  -i, --iocage         Update all iocage jails\n"
    printf "      --snapshot       Create snapshots for all active jails\n"
    printf "      --snapremove     Remove snapshots for all active jails\n\n"
    printf "Options:\n"
    printf "  --help               Display this help and exit\n"
    printf "  --version            Display version information and exit\n"
    exit 0
}

####################################################################################################
# GATHER FUNCTIONS
####################################################################################################

gather_information_server() {
    # gather specific system information
    # jails don't have kernels and freebsd-update -k will give an error
    if [ "$(sysctl -n security.jail.jailed)" = '0' ]; then
        FREEBSD_INSTALLED_VERSION="$(freebsd-version -k)"
    elif [ "$(sysctl -n security.jail.jailed)" = '1' ]; then
        FREEBSD_INSTALLED_VERSION='this is a jail'
    fi
    FREEBSD_RUNNING_VERSION="$(freebsd-version -r)"
    FREEBSD_USERLAND_VERSION="$(freebsd-version -u)"
}

################################################################################
# FEATURE FUNCTIONS
################################################################################

feature_freebsd() {
    printf "Updatebot will update this FreeBSD system.\n"
    printf "\n(1/3) updating base operating system to latest patch level:\n"
    ${FREEBSD_UPDATE} fetch install
    printf "\n(2/3) updating local package repository to latest version:\n"
    ${PKG} update
    printf "\n(3/3) upgrading packages to latest versions:\n"
    ${PKG} upgrade --yes
    printf "\nAll done! \\\( ^ ᴗ ^ )/\n\n"
    gather_information_server
    printf "System information:\n"
    printf "Kernel version (installed): %s\n" "${FREEBSD_INSTALLED_VERSION}"
    printf "Kernel version (running):   %s\n" "${FREEBSD_RUNNING_VERSION}"
    printf "Userland version:           %s\n\n" "${FREEBSD_USERLAND_VERSION}"
    printf "Notices:\n"
    # give notice if kernel was changed
    if [ ! "${FREEBSD_INSTALLED_VERSION}" = 'this is a jail' ]; then
        if [ ! "${FREEBSD_INSTALLED_VERSION}" = "${FREEBSD_RUNNING_VERSION}" ]; then
            printf "\- Running kernel is different from installed kernel, you may need to restart the server to effectuate the installed kernel!\n"
        fi
    fi
    printf "\- Do not forget to restart running services that were updated.\n"
    exit 0
}

feature_bastille() {
    # bootstrapped releases
    printf "Updatebot will try to update the following bootstrapped releases:\n"
    "${BASTILLE}" list releases
    printf "\nWaiting 5 seconds before initiating updates. Press ctrl + c to cancel.\n\n"
    sleep 5
    "${BASTILLE}" list releases | while read -r line; do
        printf "\nUPDATING: %s\n" "${line}"
        "${BASTILLE}" update "${line}"
    done
    printf "\n\nDone! \\\( ^ ᴗ ^ )/\n\n"

    # jails packages
    printf "Updatebot will try to update the following running jails:\n"
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}"  | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        if [ "${STATUS}" = 'Up' ]; then
            printf "%s\n" "${JAIL}"
        fi
    done
    printf "\nWaiting 5 seconds before initiating updates. Press ctrl + c to cancel.\n\n"
    sleep 5
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        DATE="$(date +%y%m%d)"
        EPOCH="$(date +%s)"
        RANDOM_NUMBER="$(jot -r 1 1 10000)"
        UNIQUE_STRING="$(printf "%s%s" "${EPOCH}" "${RANDOM_NUMBER}" | sha512sum | cut -c1-10)"
        if [ "${STATUS}" = 'Up' ]; then
            printf "UPDATING: %s\n" "${JAIL}"
            printf "(1/4) Creating snapshots for %s\n" "${JAIL}"
            "${BASTILLE}" zfs "${JAIL}" snap "updatebot-${DATE}-${UNIQUE_STRING}"
            printf "Created snapshot: %s@updatebot-%s-%s\n" "${JAIL}" "${DATE}" "${UNIQUE_STRING}"
            printf "Created snapshot: %s/root@updatebot-%s-%s\n" "${JAIL}" "${DATE}" "${UNIQUE_STRING}"
            printf "(2/4) Updating %s local package repositories to latest version\n" "${JAIL}"
            "${BASTILLE}" pkg "${JAIL}" update
            printf "(3/4) Upgrading %s packages to latest versions\n" "${JAIL}"
            "${BASTILLE}" pkg "${JAIL}" upgrade --yes
            printf "(4/4) Restarting %s\n" "${JAIL}"
            "${BASTILLE}" stop "${JAIL}"
            sleep 1
            "${BASTILLE}" start "${JAIL}"
        elif [ "${STATUS}" = 'Down' ]; then
            printf "SKIPPING (DOWN): %s\n" "${JAIL}"
        else
            printf "SKIPPING (UNKNOWN): %s\n" "${JAIL}"
        fi
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    printf "\nJail overview:\n\n"
    "${BASTILLE}" list -a
    exit 0
}

feature_bastille_snapshot() {
    printf "updatebot will create snapshots for the following running jails:\n"
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        if [ "${STATUS}" = 'Up' ]; then
            printf "\- %s\n" "${JAIL}"
        fi
    done
    printf "Creating snapshots for:\n"
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        DATE="$(date +%y%m%d)"
        EPOCH="$(date +%s)"
        RANDOM_NUMBER="$(jot -r 1 1 10000)"
        UNIQUE_STRING="$(printf "%s%s" "${EPOCH}" "${RANDOM_NUMBER}" | sha512sum | cut -c1-10)"
        if [ "${STATUS}" = 'Up' ]; then
            "${BASTILLE}" zfs "${JAIL}" snap "updatebot-${DATE}-${UNIQUE_STRING}"
            printf "Created snapshot: %s@updatebot-%s-%s\n" "${JAIL}" "${DATE}" "${UNIQUE_STRING}"
            printf "Created snapshot: %s/root@updatebot-%s-%s\n\n" "${JAIL}" "${DATE}" "${UNIQUE_STRING}"
        fi
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    exit 0
}

feature_bastille_snapremove() {
    printf "Removing automatically created snapshots for the following running jails:\n"
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        if [ "${STATUS}" = 'Up' ]; then
            printf "\- %s\n" "${JAIL}"
        fi
    done
    printf "\nRemoving snapshots for:"
    "${BASTILLE}" list -a | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $2;}')"
        JAIL="$(echo "${line}" | awk '{print $1;}')"
        if [ "${STATUS}" = 'Up' ]; then
            "${BASTILLE}" zfs "${JAIL}" df | grep "${JAIL}@updatebot-" | awk '{print $1}' | cut -d @ -f2- | while read -r line; do
            "${BASTILLE}" zfs "${JAIL}" destroy_snapshot "${line}"
            printf "Destroyed snapshot: %s\n" "${line}"
            done
        fi
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    exit 0
}

feature_iocage() {
    printf "Updatebot will try to update the following jails:\n"
    "${IOCAGE}" list --header | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $3;}')"
        JAIL="$(echo "${line}" | awk '{print $2;}')"
        if [ "${STATUS}" = 'up' ]; then
            printf "\- %s\n" "${JAIL}"
        fi
    done
    printf "\nWaiting 5 seconds before initiating updates. Press ctrl + c to cancel.\n\n"
    sleep 5
    "${IOCAGE}" list --header | while read -r line; do
        STATUS="$(echo "${line}" | awk '{print $3;}')"
        JAIL="$(echo "${line}" | awk '{print $2;}')"
        if [ "${STATUS}" = 'up' ]; then
            printf "\nUPDATING: %s\n" "${JAIL}"
            printf "(1/4) Updating %s to latest patch level\n" "${JAIL}"
            "${IOCAGE}" update "${JAIL}"
            printf "\n(2/4) Updating %s local package repositories to latest version\n" "${JAIL}"
            "${IOCAGE}" exec "${JAIL}" "${PKG}" update
            printf "\n(3/4) Upgrading %s packages to latest versions\n" "${JAIL}"
            "${IOCAGE}" exec "${JAIL}" "${PKG}" upgrade --yes
            printf "\n(4/4) Restarting %s\n" "${JAIL}"
            "${IOCAGE}" stop "${JAIL}"
            sleep 1
            "${IOCAGE}" start "${JAIL}"
        elif [ "${STATUS}" = 'down' ]; then
            printf "SKIPPING (DOWN): %s\n" "${JAIL}"
        else
            printf "SKIPPING (UNKNOWN): %s\n" "${JAIL}"
        fi
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    printf "\nJail overview:\n\n"
    "${IOCAGE}" list --long
    exit 0
}

feature_iocage_snapshot() {
    printf "updatebot will create snapshots for the following jails:\n"
    ${IOCAGE} list --quick --header | awk '{print $1;}'
    printf "\n(1/1) Creating snapshots:\n"
    "${IOCAGE}" list --quick --header | awk '{print $1;}' | while read -r line; do
        "${IOCAGE}" snapshot "${line}"
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    exit 0
}

feature_iocage_snapremove() {
    printf "updatebot will remove all automatically created snapshots for the following jails:\n"
    ${IOCAGE} list --quick --header | awk '{print $1;}'
    printf "\n(1/1) Removing snapshots:\n"
    "${IOCAGE}" list --quick --header | awk '{print $1;}' | while read -r line; do
        JAIL_NAME="${line}"
        "${IOCAGE}" snaplist -H "${line}" | awk '{print $1;}' | grep "ioc_update" | grep -v "/root" | while read -r line; do
            "${IOCAGE}" snapremove --name "${line}" "${JAIL_NAME}"
        done
    done
    printf "\n\nAll done! \\\( ^ ᴗ ^ )/\n"
    exit 0
}

################################################################################
# MAIN FUNCTIONS
################################################################################

updatebot_main() {
    # check whether requirements are met
    requirement_root
    requirement_os

    # return error when a invalid argument is used
    if [ "${ARGUMENT_NONE}" = '1' ]; then
        program_error 'argument is invalid, use updatebot --help for proper usage'
    # call option based on arguments
    elif [ "${ARGUMENT_VERSION}" = '1' ]; then
        option_version
    elif [ "${ARGUMENT_HELP}" = '1' ]; then
        option_help
    # call feature based on arguments
    elif [ "${ARGUMENT_BASTILLE}" = '1' ] && [ "${ARGUMENT_SNAPSHOT}" = '1' ]; then
        feature_bastille_snapshot
    elif [ "${ARGUMENT_BASTILLE}" = '1' ] && [ "${ARGUMENT_SNAPREMOVE}" = '1' ]; then
        feature_bastille_snapremove
    elif [ "${ARGUMENT_IOCAGE}" = '1' ] && [ "${ARGUMENT_SNAPSHOT}" = '1' ]; then
        feature_iocage_snapshot
    elif [ "${ARGUMENT_IOCAGE}" = '1' ] && [ "${ARGUMENT_SNAPREMOVE}" = '1' ]; then
        feature_iocage_snapremove
    elif [ "${ARGUMENT_FREEBSD}" = '1' ]; then
        feature_freebsd
    elif [ "${ARGUMENT_BASTILLE}" = '1' ]; then
        requirement_bastille
        feature_bastille
    elif [ "${ARGUMENT_IOCAGE}" = '1' ]; then
        requirement_iocage
        feature_iocage
    fi
}

####################################################################################################
# CALL MAIN FUNCTIONS
####################################################################################################

updatebot_main
